
********** TESTING CARD: tribute **********
Test 1: Revealed 2 Action card = +4 Action
Action count = 5, expected = 5
Test passed!

Test 2: Revealed 2 Treasure card = +4 coins

Coins count = 8, expected = 8
Test passed!

Test 3: Revealed 2 Victory card = +4 cards
Hand count = 9, expected = 9
Test passed!

********** Testing Card: adventurer **********
Test 1: Verify size of hand
hand count = 8, expected = 6
Test failed.
Test 2: Verify size of deck
deck count = 0, expected = 3
Test failed.

********** TESTING CARD: steward **********
TEST 1: gain 2 cards 
Hand count = 6, expected = 6
Test passed!
TEST 2: gain 2 coins 
Coins = 6, expected = 6
Test passed!
TEST 3: trash 2 cards 
Hand count = 2, expected = 3
Deck count = 3, expected = 3
Test failed.

********** TESTING CARD: smithy **********
Test 1: +3 Cards
Card count before played = 5, expect = 5
Card count = 9, expected = 7
Test failed.

********** TESTING CARD: adventurer **********
Test 1: Verify coin count changes
coins = 4, expected = 4
Test passed!
Extra coins = 1, expected = 2
Test failed.
Test 2: Verify coins action doesn't change 
actions left = 1, expected = 1
Test passed!
Test 3: Veryify bad function call fails 
Test failed.

********** TESTING CARD: smithy **********
Test 1: Deck count change
Deck count = 0, expected = 2
Test failed.
Test 2: Coin change
Coin count = 4, expected = 4
Test passed!
Test 3: Bad function call failed
Test failed.

********** TESTING CARD: great_hall **********
Test 1: Hand count
Hand count = 5, expected = 5
Test passed!
Test 2: Number of actions
Actions = 2, expected = 2
Test passed!
Test 3: Coin change
Coin count = 4, expected = 4
Test passed!
Test 4: Bad function call failed
Test failed.

********** TESTING CARD: village **********
Test 1: Hand count change + 1
Hand count = 7, expected = 5
Test failed.
Test 2: Action count + 2
Action count = 5, expected = 3
Test failed.
Test 3: Coin change
Coin count = 4, expected = 4
Test passed!
Test 4: Bad function call failed
Test failed.
File 'dominion.c'
Lines executed:20.74% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        8:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        8:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        8:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        8:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        8:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        8:  576:    state->deckCount[player]--;
        8:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        8:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int adventurerCard(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  647:{
    #####:  648:int drawntreasure=0; 
        -:  649:int cardDrawn; 
        -:  650:int temphand[MAX_HAND];
    #####:  651:int z=0; 
        -:  652:
    #####:  653:   while(drawntreasure<4)
        -:  654:   {
        -:  655:   
    #####:  656:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:         shuffle(currentPlayer, state);
        -:  658:      }
    #####:  659:      drawCard(currentPlayer, state);
    #####:  660:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  661:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  662:         drawntreasure++;
        -:  663:      else{
    #####:  664:         temphand[z]=cardDrawn;
    #####:  665:         state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:         z++;
        -:  667:         }
        -:  668:   }
    #####:  669:      while(z-1>=0)
        -:  670:      {
    #####:  671:         state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  672:            z=z-1;
        -:  673:      }
        -:  674:      
    #####:  675:      return 0;
        -:  676:}
        -:  677:
    #####:  678:int smithyCard(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  679:{
        -:  680:int i; 
        -:  681:
        -:  682:   //+3 Cards
    #####:  683:   for (i = 0; i < 5; i++)
        -:  684:   {
    #####:  685:     drawCard(currentPlayer, state);
        -:  686:   }
        -:  687:         
        -:  688:      //discard card from hand
    #####:  689:      discardCard(handPos, currentPlayer, state, 0);
    #####:  690:      return 0;
        -:  691:}
        -:  692:
        1:  693:int villageCard(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  694:{
        -:  695:         //+1 Card changed to 2 draws for bug 
        1:  696:      drawCard(currentPlayer, state);
        1:  697:      drawCard(currentPlayer, state); 
        1:  698:      drawCard(currentPlayer, state);
        -:  699:         
        -:  700:      //+2 Actions changed to +4 for bug
        1:  701:      state->numActions = state->numActions + 4;
        -:  702:         
        -:  703:      //discard played card from hand
        1:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:
        1:  706:      return 0; 
        -:  707:}
        -:  708:
    #####:  709:int greatHallCard(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  710:{
        -:  711:         //+1 Card  
    #####:  712:      drawCard(currentPlayer, state); 
        -:  713:  
        -:  714:      //+1 Actions  
    #####:  715:      state->numActions++;
        -:  716:   
        -:  717:      //discard card from hand
    #####:  718:      discardCard(handPos, currentPlayer, state, 0);
        -:  719:
    #####:  720:      return 0;
        -:  721:}
        -:  722:
    #####:  723:int councilRoomCard(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer)
        -:  724:{
        -:  725:int i; 
        -:  726:   
        -:  727:   //+4 Cards changed to 6 for bug
    #####:  728:   for (i = 0; i < 6; i++)
        -:  729:   {
    #####:  730:     drawCard(currentPlayer, state);
        -:  731:   }
        -:  732:         
        -:  733:      //+1 Buy changed to 2 for bug 
    #####:  734:      state->numBuys++;
    #####:  735:      state->numBuys++; 
        -:  736:         
        -:  737:      //Each other player draws a card
    #####:  738:      for (i = 0; i < state->numPlayers; i+2) // changed so every other player draws cards . used to be i++
        -:  739:   {
    #####:  740:     if ( i != currentPlayer )
        -:  741:       {
    #####:  742:         drawCard(i, state);
    #####:  743:         drawCard(i, state); // added for bug, everyone draws 2 
        -:  744:       }
        -:  745:   }
        -:  746:         
        -:  747:      //put played card in played card pile
    #####:  748:      discardCard(handPos, currentPlayer, state, 0);
        -:  749:         
    #####:  750:      return 0;
        -:  751:}
        -:  752:
        -:  753:
        -:  754:
        2:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:  int i;
        -:  758:  int j;
        -:  759:  int k;
        -:  760:  int x;
        -:  761:  int index;
        2:  762:  int currentPlayer = whoseTurn(state);
        2:  763:  int nextPlayer = currentPlayer + 1;
        -:  764:
        2:  765:  int tributeRevealedCards[2] = {-1, -1};
        -:  766:  int temphand[MAX_HAND];// moved above the if statement
        2:  767:  int drawntreasure=0;
        -:  768:  int cardDrawn;
        2:  769:  int z = 0;// this is the counter for the temp hand
        2:  770:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  771:    nextPlayer = 0;
        -:  772:  }
        -:  773:  
        -:  774:
        -:  775:/* Pick 5 of these cards including smithy and adventurer and introduce bugs - take those 5 and make own functions within the code base */ 
        -:  776:
        -:  777:   
        -:  778:  //uses switch to select card and perform actions
        2:  779:  switch( card ) 
        -:  780:    {
        -:  781:
        -:  782:
        -:  783:    case adventurer:
        -:  784:
    #####:  785:      adventurerCard(card, choice1, choice2, choice3, state, handPos, &bonus, currentPlayer); 
        -:  786:
    #####:  787:      return 0; 
        -:  788:
        -:  789:    /*
        -:  790:    // Old code base within switch statment 
        -:  791:
        -:  792:      while(drawntreasure<2){
        -:  793:   if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  794:     shuffle(currentPlayer, state);
        -:  795:   }
        -:  796:   drawCard(currentPlayer, state);
        -:  797:   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  798:   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  799:     drawntreasure++;
        -:  800:   else{
        -:  801:     temphand[z]=cardDrawn;
        -:  802:     state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  803:     z++;
        -:  804:   }
        -:  805:      }
        -:  806:      while(z-1>=0){
        -:  807:   state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  808:   z=z-1;
        -:  809:      }
        -:  810:      return 0;
        -:  811:   */
        -:  812:         
        -:  813:    case council_room:
        -:  814:
    #####:  815:      councilRoomCard(card, choice1, choice2, choice3, state, handPos, &bonus, currentPlayer); 
        -:  816:
    #####:  817:      return 0; 
        -:  818:
        -:  819:    /*
        -:  820:    // Original Code Council Room
        -:  821:      //+4 Cards
        -:  822:      for (i = 0; i < 4; i++)
        -:  823:   {
        -:  824:     drawCard(currentPlayer, state);
        -:  825:   }
        -:  826:         
        -:  827:      //+1 Buy
        -:  828:      state->numBuys++;
        -:  829:         
        -:  830:      //Each other player draws a card
        -:  831:      for (i = 0; i < state->numPlayers; i++)
        -:  832:   {
        -:  833:     if ( i != currentPlayer )
        -:  834:       {
        -:  835:         drawCard(i, state);
        -:  836:       }
        -:  837:   }
        -:  838:         
        -:  839:      //put played card in played card pile
        -:  840:      discardCard(handPos, currentPlayer, state, 0);
        -:  841:         
        -:  842:      return 0;
        -:  843:   */ 
        -:  844:         
        -:  845:    case feast:
        -:  846:      //gain card with cost up to 5
        -:  847:      //Backup hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  849:   temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:   state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  851:      }
        -:  852:      //Backup hand
        -:  853:
        -:  854:      //Update Coins for Buy
    #####:  855:      updateCoins(currentPlayer, state, 5);
    #####:  856:      x = 1;//Condition to loop on
    #####:  857:      while( x == 1) {//Buy one card
    #####:  858:   if (supplyCount(choice1, state) <= 0){
        -:  859:     if (DEBUG)
        -:  860:       printf("None of that card left, sorry!\n");
        -:  861:
        -:  862:     if (DEBUG){
        -:  863:       printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  864:     }
        -:  865:   }
    #####:  866:   else if (state->coins < getCost(choice1)){
    #####:  867:     printf("That card is too expensive!\n");
        -:  868:
        -:  869:     if (DEBUG){
        -:  870:       printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  871:     }
        -:  872:   }
        -:  873:   else{
        -:  874:
        -:  875:     if (DEBUG){
        -:  876:       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:     }
        -:  878:
    #####:  879:     gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  880:     x = 0;//No more buying cards
        -:  881:
        -:  882:     if (DEBUG){
        -:  883:       printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  884:     }
        -:  885:
        -:  886:   }
        -:  887:      }     
        -:  888:
        -:  889:      //Reset Hand
    #####:  890:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  891:   state->hand[currentPlayer][i] = temphand[i];
    #####:  892:   temphand[i] = -1;
        -:  893:      }
        -:  894:      //Reset Hand
        -:  895:               
    #####:  896:      return 0;
        -:  897:         
        -:  898:    case gardens:
    #####:  899:      return -1;
        -:  900:         
        -:  901:    case mine:
    #####:  902:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903:
    #####:  904:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  905:   {
    #####:  906:     return -1;
        -:  907:   }
        -:  908:      
    #####:  909:      if (choice2 > treasure_map || choice2 < curse)
        -:  910:   {
    #####:  911:     return -1;
        -:  912:   }
        -:  913:
    #####:  914:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  915:   {
    #####:  916:     return -1;
        -:  917:   }
        -:  918:
    #####:  919:      gainCard(choice2, state, 2, currentPlayer);
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
        -:  924:      //discard trashed card
    #####:  925:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926:   {
    #####:  927:     if (state->hand[currentPlayer][i] == j)
        -:  928:       {
    #####:  929:         discardCard(i, currentPlayer, state, 0);        
    #####:  930:         break;
        -:  931:       }
        -:  932:   }
        -:  933:         
    #####:  934:      return 0;
        -:  935:         
        -:  936:    case remodel:
    #####:  937:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  938:
    #####:  939:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  940:   {
    #####:  941:     return -1;
        -:  942:   }
        -:  943:
    #####:  944:      gainCard(choice2, state, 0, currentPlayer);
        -:  945:
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
        -:  948:
        -:  949:      //discard trashed card
    #####:  950:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  951:   {
    #####:  952:     if (state->hand[currentPlayer][i] == j)
        -:  953:       {
    #####:  954:         discardCard(i, currentPlayer, state, 0);        
    #####:  955:         break;
        -:  956:       }
        -:  957:   }
        -:  958:
        -:  959:
    #####:  960:      return 0;
        -:  961:      
        -:  962:    case smithy:
        -:  963:      
    #####:  964:      smithyCard(card, choice1, choice2, choice3, state, handPos, &bonus, currentPlayer);
        -:  965:
    #####:  966:      return 0;
        -:  967:
        -:  968:    /*
        -:  969:    // original code 
        -:  970:      //+3 Cards
        -:  971:      for (i = 0; i < 3; i++)
        -:  972:   {
        -:  973:     drawCard(currentPlayer, state);
        -:  974:   }
        -:  975:         
        -:  976:      //discard card from hand
        -:  977:      discardCard(handPos, currentPlayer, state, 0);
        -:  978:      return 0;
        -:  979:
        -:  980:   */
        -:  981:      
        -:  982:    case village:
        -:  983:
        1:  984:      villageCard(card, choice1, choice2, choice3, state, handPos, &bonus, currentPlayer); 
        -:  985:
        1:  986:      return 0; 
        -:  987:
        -:  988:      /*
        -:  989:      //+1 Card
        -:  990:      drawCard(currentPlayer, state);
        -:  991:         
        -:  992:      //+2 Actions
        -:  993:      state->numActions = state->numActions + 2;
        -:  994:         
        -:  995:      //discard played card from hand
        -:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:      return 0;
        -:  998:      */ 
        -:  999:      
        -: 1000:    case baron:
    #####: 1001:      state->numBuys++;//Increase buys by 1!
    #####: 1002:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1003:   int p = 0;//Iterator for hand!
    #####: 1004:   int card_not_discarded = 1;//Flag for discard set!
    #####: 1005:   while(card_not_discarded){
    #####: 1006:     if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1007:       state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1008:       state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1009:       state->discardCount[currentPlayer]++;
    #####: 1010:       for (;p < state->handCount[currentPlayer]; p++){
    #####: 1011:         state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1012:       }
    #####: 1013:       state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1014:       state->handCount[currentPlayer]--;
    #####: 1015:       card_not_discarded = 0;//Exit the loop
        -: 1016:     }
    #####: 1017:     else if (p > state->handCount[currentPlayer]){
        -: 1018:       if(DEBUG) {
        -: 1019:         printf("No estate cards in your hand, invalid choice\n");
        -: 1020:         printf("Must gain an estate if there are any\n");
        -: 1021:       }
    #####: 1022:       if (supplyCount(estate, state) > 0){
    #####: 1023:         gainCard(estate, state, 0, currentPlayer);
    #####: 1024:         state->supplyCount[estate]--;//Decrement estates
    #####: 1025:         if (supplyCount(estate, state) == 0){
    #####: 1026:      isGameOver(state);
        -: 1027:         }
        -: 1028:       }
    #####: 1029:       card_not_discarded = 0;//Exit the loop
        -: 1030:     }
        -: 1031:             
        -: 1032:     else{
    #####: 1033:       p++;//Next card
        -: 1034:     }
        -: 1035:   }
        -: 1036:      }
        -: 1037:             
        -: 1038:      else{
    #####: 1039:   if (supplyCount(estate, state) > 0){
    #####: 1040:     gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1041:     state->supplyCount[estate]--;//Decrement Estates
    #####: 1042:     if (supplyCount(estate, state) == 0){
    #####: 1043:       isGameOver(state);
        -: 1044:     }
        -: 1045:   }
        -: 1046:      }
        -: 1047:       
        -: 1048:      
    #####: 1049:      return 0;
        -: 1050:      
        -: 1051:    case great_hall:
        -: 1052:
    #####: 1053:      greatHallCard(card, choice1, choice2, choice3, state, handPos, &bonus, currentPlayer); 
        -: 1054:
    #####: 1055:      return 0; 
        -: 1056:
        -: 1057:      /*
        -: 1058:      // original great hall code 
        -: 1059:      //+1 Card
        -: 1060:      drawCard(currentPlayer, state);
        -: 1061:         
        -: 1062:      //+1 Actions
        -: 1063:      state->numActions++;
        -: 1064:         
        -: 1065:      //discard card from hand
        -: 1066:      discardCard(handPos, currentPlayer, state, 0);
        -: 1067:      return 0;
        -: 1068:      */
        -: 1069:      
        -: 1070:    case minion:
        -: 1071:      //+1 action
    #####: 1072:      state->numActions++;
        -: 1073:         
        -: 1074:      //discard card from hand
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
        -: 1076:         
    #####: 1077:      if (choice1)      //+2 coins
        -: 1078:   {
    #####: 1079:     state->coins = state->coins + 2;
        -: 1080:   }
        -: 1081:         
    #####: 1082:      else if (choice2)    //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1083:   {
        -: 1084:     //discard hand
    #####: 1085:     while(numHandCards(state) > 0)
        -: 1086:       {
    #####: 1087:         discardCard(handPos, currentPlayer, state, 0);
        -: 1088:       }
        -: 1089:            
        -: 1090:     //draw 4
    #####: 1091:     for (i = 0; i < 4; i++)
        -: 1092:       {
    #####: 1093:         drawCard(currentPlayer, state);
        -: 1094:       }
        -: 1095:            
        -: 1096:     //other players discard hand and redraw if hand size > 4
    #####: 1097:     for (i = 0; i < state->numPlayers; i++)
        -: 1098:       {
    #####: 1099:         if (i != currentPlayer)
        -: 1100:      {
    #####: 1101:        if ( state->handCount[i] > 4 )
        -: 1102:          {
        -: 1103:            //discard hand
    #####: 1104:            while( state->handCount[i] > 0 )
        -: 1105:         {
    #####: 1106:           discardCard(handPos, i, state, 0);
        -: 1107:         }
        -: 1108:                     
        -: 1109:            //draw 4
    #####: 1110:            for (j = 0; j < 4; j++)
        -: 1111:         {
    #####: 1112:           drawCard(i, state);
        -: 1113:         }
        -: 1114:          }
        -: 1115:      }
        -: 1116:       }
        -: 1117:            
        -: 1118:   }
    #####: 1119:      return 0;
        -: 1120:      
        -: 1121:    case steward:
        -: 1122:
    #####: 1123:      if (choice1 == 1)
        -: 1124:   {
        -: 1125:     //+2 cards
    #####: 1126:     drawCard(currentPlayer, state);
    #####: 1127:     drawCard(currentPlayer, state);
        -: 1128:   }
    #####: 1129:      else if (choice1 == 2)
        -: 1130:   {
        -: 1131:     //+2 coins
    #####: 1132:     state->coins = state->coins + 2;
        -: 1133:   }
        -: 1134:      else
        -: 1135:   {
        -: 1136:     //trash 2 cards in hand
    #####: 1137:     discardCard(choice2, currentPlayer, state, 1);
    #####: 1138:     discardCard(choice3, currentPlayer, state, 1);
        -: 1139:   }
        -: 1140:         
        -: 1141:      //discard card from hand
    #####: 1142:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1143:      return 0;
        -: 1144:   
        -: 1145:      
        -: 1146:    case tribute:
    #####: 1147:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1148:   if (state->deckCount[nextPlayer] > 0){
    #####: 1149:     tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:     state->deckCount[nextPlayer]--;
        -: 1151:   }
    #####: 1152:   else if (state->discardCount[nextPlayer] > 0){
    #####: 1153:     tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1154:     state->discardCount[nextPlayer]--;
        -: 1155:   }
        -: 1156:   else{
        -: 1157:     //No Card to Reveal
        -: 1158:     if (DEBUG){
        -: 1159:       printf("No cards to reveal\n");
        -: 1160:     }
        -: 1161:   }
        -: 1162:      }
        -: 1163:       
        -: 1164:      else{
    #####: 1165:   if (state->deckCount[nextPlayer] == 0){
    #####: 1166:     for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1167:       state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1168:       state->deckCount[nextPlayer]++;
    #####: 1169:       state->discard[nextPlayer][i] = -1;
    #####: 1170:       state->discardCount[nextPlayer]--;
        -: 1171:     }
        -: 1172:             
    #####: 1173:     shuffle(nextPlayer,state);//Shuffle the deck
        -: 1174:   } 
    #####: 1175:   tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1176:   state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1177:   state->deckCount[nextPlayer]--;
    #####: 1178:   tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1179:   state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1180:   state->deckCount[nextPlayer]--;
        -: 1181:      }    
        -: 1182:             
    #####: 1183:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1184:   state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1185:   state->playedCardCount++;
    #####: 1186:   tributeRevealedCards[1] = -1;
        -: 1187:      }
        -: 1188:
    #####: 1189:      for (i = 0; i <= 2; i ++){
    #####: 1190:   if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1191:     state->coins += 2;
        -: 1192:   }
        -: 1193:          
    #####: 1194:   else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1195:     drawCard(currentPlayer, state);
    #####: 1196:     drawCard(currentPlayer, state);
        -: 1197:   }
        -: 1198:   else{//Action Card
    #####: 1199:     state->numActions = state->numActions + 2;
        -: 1200:   }
        -: 1201:      }
        -: 1202:       
    #####: 1203:      return 0;
        -: 1204:      
        -: 1205:    case ambassador:
    #####: 1206:      j = 0;      //used to check if player has enough cards to discard
        -: 1207:
    #####: 1208:      if (choice2 > 2 || choice2 < 0)
        -: 1209:   {
    #####: 1210:     return -1;            
        -: 1211:   }
        -: 1212:
    #####: 1213:      if (choice1 == handPos)
        -: 1214:   {
    #####: 1215:     return -1;
        -: 1216:   }
        -: 1217:
    #####: 1218:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1219:   {
    #####: 1220:     if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1221:       {
    #####: 1222:         j++;
        -: 1223:       }
        -: 1224:   }
    #####: 1225:      if (j < choice2)
        -: 1226:   {
    #####: 1227:     return -1;            
        -: 1228:   }
        -: 1229:
        -: 1230:      if (DEBUG) 
        -: 1231:   printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1232:
        -: 1233:      //increase supply count for choosen card by amount being discarded
    #####: 1234:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1235:         
        -: 1236:      //each other player gains a copy of revealed card
    #####: 1237:      for (i = 0; i < state->numPlayers; i++)
        -: 1238:   {
    #####: 1239:     if (i != currentPlayer)
        -: 1240:       {
    #####: 1241:         gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1242:       }
        -: 1243:   }
        -: 1244:
        -: 1245:      //discard played card from hand
    #####: 1246:      discardCard(handPos, currentPlayer, state, 0);        
        -: 1247:
        -: 1248:      //trash copies of cards returned to supply
    #####: 1249:      for (j = 0; j < choice2; j++)
        -: 1250:   {
    #####: 1251:     for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1252:       {
    #####: 1253:         if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1254:      {
    #####: 1255:        discardCard(i, currentPlayer, state, 1);
    #####: 1256:        break;
        -: 1257:      }
        -: 1258:       }
        -: 1259:   }        
        -: 1260:
    #####: 1261:      return 0;
        -: 1262:      
        -: 1263:    case cutpurse:
        -: 1264:
    #####: 1265:      updateCoins(currentPlayer, state, 2);
    #####: 1266:      for (i = 0; i < state->numPlayers; i++)
        -: 1267:   {
    #####: 1268:     if (i != currentPlayer)
        -: 1269:       {
    #####: 1270:         for (j = 0; j < state->handCount[i]; j++)
        -: 1271:      {
    #####: 1272:        if (state->hand[i][j] == copper)
        -: 1273:          {
    #####: 1274:            discardCard(j, i, state, 0);
    #####: 1275:            break;
        -: 1276:          }
    #####: 1277:        if (j == state->handCount[i])
        -: 1278:          {
    #####: 1279:            for (k = 0; k < state->handCount[i]; k++)
        -: 1280:         {
        -: 1281:           if (DEBUG)
        -: 1282:             printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1283:         }  
    #####: 1284:            break;
        -: 1285:          }    
        -: 1286:      }
        -: 1287:               
        -: 1288:       }
        -: 1289:            
        -: 1290:   }           
        -: 1291:
        -: 1292:      //discard played card from hand
    #####: 1293:      discardCard(handPos, currentPlayer, state, 0);        
        -: 1294:
    #####: 1295:      return 0;
        -: 1296:
        -: 1297:      
        -: 1298:    case embargo: 
        -: 1299:      //+2 Coins
    #####: 1300:      state->coins = state->coins + 2;
        -: 1301:         
        -: 1302:      //see if selected pile is in play
    #####: 1303:      if ( state->supplyCount[choice1] == -1 )
        -: 1304:   {
    #####: 1305:     return -1;
        -: 1306:   }
        -: 1307:         
        -: 1308:      //add embargo token to selected supply pile
    #####: 1309:      state->embargoTokens[choice1]++;
        -: 1310:         
        -: 1311:      //trash card
    #####: 1312:      discardCard(handPos, currentPlayer, state, 1);     
    #####: 1313:      return 0;
        -: 1314:      
        -: 1315:    case outpost:
        -: 1316:      //set outpost flag
    #####: 1317:      state->outpostPlayed++;
        -: 1318:         
        -: 1319:      //discard card
    #####: 1320:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1321:      return 0;
        -: 1322:      
        -: 1323:    case salvager:
        -: 1324:      //+1 buy
    #####: 1325:      state->numBuys++;
        -: 1326:         
    #####: 1327:      if (choice1)
        -: 1328:   {
        -: 1329:     //gain coins equal to trashed card
    #####: 1330:     state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1331:     //trash card
    #####: 1332:     discardCard(choice1, currentPlayer, state, 1);   
        -: 1333:   }
        -: 1334:         
        -: 1335:      //discard card
    #####: 1336:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1337:      return 0;
        -: 1338:      
        -: 1339:    case sea_hag:
    #####: 1340:      for (i = 0; i < state->numPlayers; i++){
    #####: 1341:   if (i != currentPlayer){
    #####: 1342:     state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];             state->deckCount[i]--;
    #####: 1343:     state->discardCount[i]++;
    #####: 1344:     state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1345:   }
        -: 1346:      }
    #####: 1347:      return 0;
        -: 1348:      
        -: 1349:    case treasure_map:
        -: 1350:      //search hand for another treasure_map
    #####: 1351:      index = -1;
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1353:   {
    #####: 1354:     if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1355:       {
    #####: 1356:         index = i;
    #####: 1357:         break;
        -: 1358:       }
        -: 1359:   }
    #####: 1360:      if (index > -1)
        -: 1361:   {
        -: 1362:     //trash both treasure cards
    #####: 1363:     discardCard(handPos, currentPlayer, state, 1);
    #####: 1364:     discardCard(index, currentPlayer, state, 1);
        -: 1365:
        -: 1366:     //gain 4 Gold cards
    #####: 1367:     for (i = 0; i < 4; i++)
        -: 1368:       {
    #####: 1369:         gainCard(gold, state, 1, currentPlayer);
        -: 1370:       }
        -: 1371:            
        -: 1372:     //return success
    #####: 1373:     return 1;
        -: 1374:   }
        -: 1375:         
        -: 1376:      //no second treasure_map found in hand
    #####: 1377:      return -1;
        -: 1378:    }
        -: 1379:   
        1: 1380:  return -1;
        -: 1381:}
        -: 1382:
        1: 1383:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1384:{
        -: 1385:	
        -: 1386:  //if card is not trashed, added to Played pile 
        1: 1387:  if (trashFlag < 1)
        -: 1388:    {
        -: 1389:      //add card to played pile
        1: 1390:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1391:      state->playedCardCount++;
        -: 1392:    }
        -: 1393:	
        -: 1394:  //set played card to -1
        1: 1395:  state->hand[currentPlayer][handPos] = -1;
        -: 1396:	
        -: 1397:  //remove card from player's hand
        1: 1398:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1399:    {
        -: 1400:      //reduce number of cards in hand
    #####: 1401:      state->handCount[currentPlayer]--;
        -: 1402:    }
        1: 1403:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1404:    {
        -: 1405:      //reduce number of cards in hand
    #####: 1406:      state->handCount[currentPlayer]--;
        -: 1407:    }
        -: 1408:  else 	
        -: 1409:    {
        -: 1410:      //replace discarded card with last card in hand
        1: 1411:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1412:      //set last card to -1
        1: 1413:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1414:      //reduce number of cards in hand
        1: 1415:      state->handCount[currentPlayer]--;
        -: 1416:    }
        -: 1417:	
        1: 1418:  return 0;
        -: 1419:}
        -: 1420:
    #####: 1421:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1422:{
        -: 1423:  //Note: supplyPos is enum of choosen card
        -: 1424:	
        -: 1425:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1426:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1427:    {
    #####: 1428:      return -1;
        -: 1429:    }
        -: 1430:	
        -: 1431:  //added card for [whoseTurn] current player:
        -: 1432:  // toFlag = 0 : add to discard
        -: 1433:  // toFlag = 1 : add to deck
        -: 1434:  // toFlag = 2 : add to hand
        -: 1435:
    #####: 1436:  if (toFlag == 1)
        -: 1437:    {
    #####: 1438:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1439:      state->deckCount[player]++;
        -: 1440:    }
    #####: 1441:  else if (toFlag == 2)
        -: 1442:    {
    #####: 1443:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1444:      state->handCount[player]++;
        -: 1445:    }
        -: 1446:  else
        -: 1447:    {
    #####: 1448:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1449:      state->discardCount[player]++;
        -: 1450:    }
        -: 1451:	
        -: 1452:  //decrease number in supply pile
    #####: 1453:  state->supplyCount[supplyPos]--;
        -: 1454:	 
    #####: 1455:  return 0;
        -: 1456:}
        -: 1457:
        1: 1458:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1459:{
        -: 1460:  int i;
        -: 1461:	
        -: 1462:  //reset coin count
        1: 1463:  state->coins = 0;
        -: 1464:
        -: 1465:  //add coins for each Treasure card in player's hand
        6: 1466:  for (i = 0; i < state->handCount[player]; i++)
        -: 1467:    {
        5: 1468:      if (state->hand[player][i] == copper)
        -: 1469:	{
        4: 1470:	  state->coins += 1;
        -: 1471:	}
        1: 1472:      else if (state->hand[player][i] == silver)
        -: 1473:	{
    #####: 1474:	  state->coins += 2;
        -: 1475:	}
        1: 1476:      else if (state->hand[player][i] == gold)
        -: 1477:	{
    #####: 1478:	  state->coins += 3;
        -: 1479:	}	
        -: 1480:    }	
        -: 1481:
        -: 1482:  //add bonus
        1: 1483:  state->coins += bonus;
        -: 1484:
        1: 1485:  return 0;
        -: 1486:}
        -: 1487:
        -: 1488:
        -: 1489://end of dominion.c
